<?php
/**
 * User credentials model
 * Created date : 19/03/2019
 *
 * PHP version 5
 *
 * @author  Original Author <wasifali591@gmail.com>
 * @version <GIT: wasifali591/industrial-transportation-slim>
 */

namespace App\api\models;

use App\api\services\CRUDOperation;

require_once __DIR__ .'/../services/HashCode.php';

/**
 * Contain one method(login)
 */
class UserCredentialsModel
{
    private $_layoutName="UserCredentialsLayout";
    /**
     * Find the $Email  is present in the db or not, if present then find the
     * corosponding password and return
     *
     * @param array  $requestValue values, which have to check is present
     *                             in the db or not
     * @param object $container    hold the db instance
     *
     * @return multiple types of return according to the situation
     */
    public function login($requestValue, $container)
    {
        /**
         * Used to store instance of CRUDOperation
         *
         * @var object
         */
        $instance=new CRUDOperation();
        $results=$instance->findRecord($this->_layoutName, $requestValue, $container);
        return $results;
    }

    /**
     * Change Passsword
     *
     * @param array  $requestValue values, which need to insert password information
     *                             when a user is registering
     * @param object $container    hold the db instance
     *
     * @return multiple types of return according to the situation
     */
    public function registration($requestValue, $container)
    {
        /**
         * Used to store instance of CRUDOperation
         *
         * @var object
         */
        $instance=new CRUDOperation();
        $results=$instance->createRecord($this->_layoutName, $requestValue, $container);
        // $results=$instance->findRecord($this->_layoutName, $requestValue, $container);
        if (is_string($results)) {
            return $results;
        }
        return "SUCCESSFULLY_REGISTER";
    }

    /**
     * Change Passsword
     *
     * @param array  $requestValue values, which need to change password
     * @param object $container    hold the db instance
     *
     * @return multiple types of return according to the situation
     */
    public function changePassword($requestValue, $container)
    {
        $fieldsName=array(
            "__kf_UserId_xn"=>$requestValue['id'],
            "Flag_xt"=>"active"
        );
        /**
         * Used to store instance of CRUDOperation
         *
         * @var object
         */
        $instance=new CRUDOperation();
        $results=$instance->findRecord($this->_layoutName, $fieldsName, $container);
        if (is_string($results)) {
            return $results;
        }
        /**
         * Used to hold the actual record id of the matched record,
         * which is generated by FM
         *
         * @var int
         */
        $result=$results[0];
        $recordId=$result['recordId'];
        if (password_verify($requestValue['oldPassword'], $result['Password_xt'])) {
            $fieldsName=array(
                '__kf_UserId_xn'=>$requestValue['id']
            );
            $results=$instance->findRecord($this->_layoutName, $fieldsName, $container);

            if (is_string($results)) {
                return $results;
            }
            foreach ($results as $record) {
                $oldPassword=$record['Password_xt'];

                if (password_verify($requestValue['password'], $oldPassword)) {
                    $match=true;
                    break;
                }
            }
            //check password is previously used or not
            if ($match) {
                return "OLD_PASSWORD";
            }
            // edit the previous password flag to inactive
            $fieldsName=array(
                "Flag_xt"=>""
            );
            $result=$instance->editRecord($this->_layoutName, $recordId, $fieldsName, $container);

            if (is_string($results)) {
                return $results;
            }
            /**
             * Used to store the hash code of the given password
             *
             * @var string
             */
            $hashCode=hashCode($requestValue['password']);
            $fieldsName=array(
                "__kf_UserId_xn"=>$requestValue['id'],
                "Password_xt"=>$hashCode,
                "Flag_xt"=>"active"
            );
            $result=$instance->createRecord($this->_layoutName, $fieldsName, $container);
            if (is_string($results)) {
                return $results;
            }
            return "PASSWORD_CHANGED";
        }
        return "PASSWORD_NOT_MATCHED";
    }
}
